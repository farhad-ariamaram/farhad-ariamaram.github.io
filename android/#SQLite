# Sqlite
    android has built-in sqlite classes for work with that without additional library
    its better to put all database related files in one folder named database

    CrimeDbSchema.java 
        include classes to define the String constantsto describe the database definations.
        public class CrimeDbSchema { 
            public static final class CrimeTable { 
                public static final String NAME = "crimes";
                public static final class Cols { 
                    public static final String UUID = "uuid"; 
                    public static final String TITLE = "title"; 
                    public static final String DATE = "date"; 
                    public static final String SOLVED = "solved"; 
                } 
            } 
        }

    CrimeBaseHelper.java
    for open SQLiteDatabase
        public class CrimeBaseHelper extends SQLiteOpenHelper { 
            private static final int VERSION = 1; 
            private static final String DATABASE_NAME = "crimeBase.db";
            public CrimeBaseHelper(Context context) { 
                super(context, DATABASE_NAME, null, VERSION); 
            }
            @Override 
            public void onCreate(SQLiteDatabase db) {
                //if this is the first time the database has been created, 
                //getWritableDatabase() will call this method, then save out the latest version number
                db.execSQL("create table " + CrimeTable.NAME+ "(" + 
                    " _id integer primary key autoincrement, " + 
                    CrimeTable.Cols.UUID + ", " + 
                    CrimeTable.Cols.TITLE + ", " + 
                    CrimeTable.Cols.DATE + ", " + 
                    CrimeTable.Cols.SOLVED + ")" 
                );
            }
            @Override 
            public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
                //If this is not the first time, check the version number in the database
                //If the version number in CrimeBaseHelper is higher, getWritableDatabase() will call this method
            } 
        }

    to use database we need following codes in repository class or where data is (like crimeLab.java in this example)
        //in class level
        private Context mContext; 
        private SQLiteDatabase mDatabase;
        //in constractor or somthing like that
        mContext = context.getApplicationContext(); 
        mDatabase = new CrimeBaseHelper(mContext).getWritableDatabase();

    ContentValues
        for CRUD on database at first we need a ContentValues that define like following code
        //define in repository class or where data is (like crimeLab.java in this example)
        private static ContentValues getContentValues(Crime crime) { 
            ContentValues values = new ContentValues(); 
            values.put(CrimeTable.Cols.UUID, crime.getId().toString()); 
            values.put(CrimeTable.Cols.TITLE, crime.getTitle()); 
            values.put(CrimeTable.Cols.DATE, crime.getDate().getTime()); 
            values.put(CrimeTable.Cols.SOLVED, crime.isSolved() ? 1 : 0);
            return values; 
        }

        note: _id is automatic created and does not need insert

    insert
        public void addCrime(Crime c) { 
            ContentValues values = getContentValues(c);
            mDatabase.insert(CrimeTable.NAME, null, values);  //second arg always null
        } 
    
    update
        public void updateCrime(Crime crime) { 
            String uuidString = crime.getId().toString(); 
            ContentValues values = getContentValues(crime);
            mDatabase.update(CrimeTable.NAME, values, CrimeTable.Cols.UUID + " = ?", new String[] { uuidString }); 
        }  
        //best way to use updateCrime method is in onPause of fragment where we change crime data 

    read
        //we use following method for reading data from database
        public Cursor query( String table, 
                            String[] columns,     
                            String where, 
                            String[] whereArgs,     
                            String groupBy, 
                            String having, 
                            String orderBy, 
                            String limit)
        that make it like following in repository class or where data is (like crimeLab.java in this example)
        private CrimeCursorWrapper queryCrimes(String whereClause, String[] whereArgs) {
            Cursor cursor = mDatabase.query( CrimeTable.NAME, 
                                            null, // columns - null selects all columns 
                                            whereClause, 
                                            whereArgs, 
                                            null, // groupBy 
                                            null, // having 
                                            null  // orderBy );
            return new CrimeCursorWrapper(cursor);
        }                     
        
        and for using that we need a new class called CursorWrapper
        public class CrimeCursorWrapper extends CursorWrapper { 
            public CrimeCursorWrapper(Cursor cursor) { super(cursor); } 

            public Crime getCrime() { 
                String uuidString = getString(getColumnIndex(CrimeTable.Cols.UUID)); 
                String title = getString(getColumnIndex(CrimeTable.Cols.TITLE)); 
                long date = getLong(getColumnIndex(CrimeTable.Cols.DATE)); 
                int isSolved = getInt(getColumnIndex(CrimeTable.Cols.SOLVED));
                Crime crime = new Crime(UUID.fromString(uuidString)); //need a constractor in crime class with Crime(UUID id)
                crime.setTitle(title); 
                crime.setDate(new Date(date)); 
                crime.setSolved(isSolved != 0);
                return crime;
            }
        }

        //for get list of model from database use following
        public List<Crime> getCrimes() { 
            List<Crime> crimes = new ArrayList<>();
            CrimeCursorWrapper cursor = queryCrimes(null, null);
            try { 
                cursor.moveToFirst(); 
                while (!cursor.isAfterLast()) { 
                    crimes.add(cursor.getCrime()); 
                    cursor.moveToNext(); 
                    } 
                } finally { 
                        cursor.close(); 
                }
            return crimes; 
        } 

        //for get one model by id we use following
        public Crime getCrime(UUID id) { 
            CrimeCursorWrapper cursor = queryCrimes( CrimeTable.Cols.UUID + " = ?", new String[] { id.toString() } );
            try { 
                if (cursor.getCount() == 0) { return null; }
                cursor.moveToFirst(); 
                return cursor.getCrime(); 
            } finally { cursor.close(); } 
        } 
        
